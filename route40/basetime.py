from collections import OrderedDict
r400600 = OrderedDict([(4592, 0.0), (4937, 77.0), (1547, 118.0), (1548, 138.0), (1549, 197.0), (1523, 238.0), (1524, 277.0), (1525, 299.0), (1526, 338.0), (6080, 359.0), (1585, 377.0), (1586, 420.0), (1587, 442.0), (4539, 500.0), (1606, 537.0), (1607, 559.0), (1609, 602.0), (1610, 659.0), (7471, 680.0), (1533, 765.0), (1534, 804.0), (1535, 845.0), (1536, 865.0), (1537, 888.0), (186, 925.0), (838, 966.0), (839, 984.0), (840, 1006.0), (841, 1025.0), (49, 1163.0), (51, 1270.0), (52, 1284.0), (261, 1366.0), (270, 1445.0), (335, 1605.0), (4521, 1705.0), (1935, 1764.0), (1937, 1846.0), (1938, 1864.0), (1939, 1907.0), (1940, 1945.0), (1941, 1966.0), (1942, 2045.0), (1943, 2105.0), (1944, 2125.0), (1945, 2184.0), (1947, 2225.0), (2643, 2325.0), (2644, 2364.0), (2709, 2387.0), (2711, 2444.0), (2712, 2464.0), (2655, 2546.0), (2656, 2605.0), (2668, 2625.0), (2672, 2664.0), (2673, 2687.0), (2206, 2726.0), (4798, 2744.0), (2674, 2846.0), (2675, 2866.0), (2124, 2885.0), (2125, 2905.0), (2126, 2925.0), (2127, 2964.0), (2128, 2984.0), (2129, 3064.0), (4797, 3103.0), (7473, 3126.0), (2681, 3163.0), (4691, 3183.0), (4796, 3206.0), (4411, 3262.0)])
r400900 = OrderedDict([(6080, 0.0), (1585, 62.0), (1586, 140.0), (1587, 204.0), (4539, 261.0), (1606, 342.0), (1607, 381.0), (1608, 440.0), (1609, 482.0), (1610, 541.0), (7471, 581.0), (1533, 679.0), (1534, 760.0), (1535, 821.0), (1536, 883.0), (1537, 940.0), (186, 1101.0), (839, 1202.0), (840, 1241.0), (841, 1621.0), (49, 1902.0), (51, 2001.0), (52, 2042.0), (261, 2160.0), (270, 2300.0), (335, 2581.0), (4521, 2702.0), (1935, 2941.0), (1937, 3061.0), (1938, 3100.0), (1939, 3201.0), (1940, 3281.0), (1941, 3320.0), (1942, 3421.0), (1943, 3521.0), (1944, 3562.0), (1945, 3660.0), (1946, 3721.0), (1947, 3760.0), (2642, 3879.0), (2643, 3921.0), (2644, 3980.0), (2709, 4081.0), (2710, 4120.0), (2711, 4142.0), (2712, 4161.0), (2655, 4300.0), (2656, 4409.0), (2668, 4468.0), (2672, 4509.0), (2673, 4568.0), (2206, 4589.0), (4798, 4629.0), (2674, 4711.0), (2675, 4748.0), (2124, 4789.0), (2125, 4809.0), (2126, 4828.0), (2127, 4869.0), (2128, 4910.0), (2129, 4969.0), (4797, 5029.0), (7473, 5109.0), (2681, 5168.0), (4691, 5189.0), (2682, 5211.0), (4796, 5228.0), (4411, 5308.0)])
r401700 = OrderedDict([(4798, 0.0), (2674, 55.0), (2675, 955.0), (2125, 1016.0), (2126, 1076.0), (2128, 1136.0), (2129, 1195.0), (4797, 1319.0), (7473, 1377.0), (4691, 1435.0), (2682, 1494.0), (4796, 1554.0), (4411, 1614.0)])
r401500 = OrderedDict([(6080, 0.0), (1585, 98.0), (1586, 141.0), (1587, 219.0), (4539, 292.0), (1606, 315.0), (1607, 370.0), (1608, 391.0), (1609, 411.0), (1610, 450.0), (7471, 471.0), (1533, 610.0), (1534, 631.0), (1535, 670.0), (1536, 731.0), (1537, 829.0), (186, 870.0), (839, 930.0), (840, 971.0), (841, 1033.0), (49, 1211.0), (51, 1252.0), (52, 1331.0), (261, 1425.0), (270, 1546.0), (335, 1785.0), (4521, 1925.0), (1935, 2124.0)])
r401800 = OrderedDict([(4521, 0.0), (1935, 39.0), (1937, 179.0), (1938, 279.0), (1939, 379.0), (1940, 459.0), (1941, 498.0), (1942, 560.0), (1943, 599.0), (1944, 638.0), (1945, 799.0), (1946, 878.0), (1947, 919.0), (2642, 1079.0), (2643, 1160.0), (2644, 1201.0), (2709, 1240.0), (2711, 1301.0), (2712, 1339.0), (2655, 1440.0), (2656, 1560.0), (2668, 1640.0), (2672, 1699.0), (2673, 1741.0), (2206, 1801.0), (4798, 1821.0), (2674, 1899.0), (2675, 1959.0), (2124, 2000.0), (2125, 2021.0), (2126, 2081.0), (2127, 2120.0), (2128, 2159.0), (2129, 2220.0), (4797, 2300.0), (7473, 2318.0), (2681, 2419.0), (4691, 2440.0), (2682, 2462.0), (4796, 2479.0), (4690, 2520.0), (4411, 2541.0)])



def basic_route_time(a, depart, destination):
    """A function to take an input Ordered Dictionary (busroute) bus id (start) and bus id (end) and return duration"""
    duration = 0.0
    starttime = 0
    endtime = 0
    #print ("Time in seconds from stop: ", depart, " to stop: ", destination, " is:")
    if depart == destination:
        return duration
    for i, (key, val) in enumerate(a.items()):
        if key == depart:
            starttime = list(a.values())[i]
        elif key == destination:
            endtime = list(a.values())[i]
    return endtime - starttime

def journey_time(hour):
    """Takes time and returns weight of taking the bus at that time"""
    if hour == '0600':
        return 1
    if hour == '0900':
        return 1.83 # time at 0900 / Time at 0600
    if hour == '1500':
        return 1.51 # time at 1500 / Time at 0600
    if hour == '1700':
        return 3.12 # time at 1700 / Time at 0600
    if hour == '1800':
        return 1.67 # time at 1800/ time at 0600

def map_bus(a, depart, destination):
    """loop through ordered dict and return list of stops, which will hbe mapped after user submit"""
    for i, (key, val) in enumerate(a.items()):
        if key == depart:
            starttime = list(a.values())[i]
        elif key == destination:
            endtime = list(a.values())[i]
    return endtime - starttime

# print(basic_route_time(r400600, 1935, 4411))
# print(basic_route_time(r401800, 1935, 4411))
# print(basic_route_time(r401800, 1935, 4411)/basic_route_time(r400600, 1935, 4411))
userinput = r400600
stop_no = 0
while stop_no != "":
    #userinput = (input('Enter the routenumber with time (r400600) (blank to exit) :' ))
    stop_no = int(input('Enter the Starting stop No :' ))
    stop_no1 = int(input('Enter the Ending stop No :'))
    print (" The estimated time in seconds is ", basic_route_time(userinput, stop_no, stop_no1) )